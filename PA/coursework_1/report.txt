1 | A Single-Chip Multiprocessor - Paper B
1.1 | Description
The paper in question introduces two main concepts of tackling the problem of a large number of transistors - simultaneous multithreading (SMT) and a chip multiprocessor (CMP) and compares both to a superscalar processor. Additionally, the paper discusses concerns about the latency of interconnect delays, the need for parallelism and the impact of increased number of transistors on design complexity.
The SMT design proposed focuses on the use of multiple threads of execution each capable of issuing multiple instructions at once. It features dynamic selection of instructions to increase utilization. In the absence of thread level parallelism, the SMT appears as a conventional superscalar processor. Conversely, the CMP design focuses on utilizing multiple cores on a single die with the ability to issue multiple instructions at the same time, however, with no multithreading at the core level. The primary target of this design are environments where multi processes can be utilized and therefore allow each core handle the execution of an individual thread. 
Additionally, the paper raises concerns about the increased delay of interconnect wires due to increased size. As a result, it proposes the use of partitioned sections of the architecture in order to keep interconnects short and simple. Furthermore, the paper emphasises the need for parallelism for future computing environments in order to provide a more sophisticated computing environment. Finally, the paper addresses concerns of design complexity and the space (area) requirements for the chip. In both instances, it is argued that increased complexity and computing performance will lead to disproportionately larger increase in the size of the chip. It is argued that the CMP solution is better suited to tackle both complexity and space challenges.


1.2 | Results
The results presented to support the arguments of the paper are obtained through a simulation of the hardware architecture in question based on a DRAM with 1 billion transistors. In order to establish a comparison, a superscalar, SMT and a CMP architectures are simulated. As a baseline “a single 2-issue processor attached to the superscalar/SMT memory system” [1] is used.
The specification of the architectures varies mainly in their design. In the case of the SMT and CMP, resources are partitioned into their respective threads or cores respectively, with the exception of issue width where the CMP has an issue width of 2 for each CPU, with eight CPUs, this leads to a total issue width of 16. The superscalar and the SMT both have issue width of 12. The SMT and superscalar architectures feature advanced branch prediction.
On a non-thread level parallelism benchmark, the superscalar and SMT both perform 43% better than the baseline while the CMP performs similarly to the baseline. This is due to the ability to utilize the larger issue width. On the other hand, CMP is not able to obtain a speedup due to the non-threaded nature of the application.
A large thread-level parallelism benchmark reveals both SMT and CMP performing very well, achieving close to 7 and 8 times speedup respectively. The superscalar benchmark performs well, however, only achieving about 3.5 speedup. CMP outperforms SMT due to larger number of issue slots. The superscalar processor is unable to uncover thread level parallelism in the program and lacks behind.
The remaining benchmarks focusing on both thread-level and instruction-level parallelism and multiprogramming scenario both show similar results. The CMP performs the best followed by SMT. The results obtained are similar to the scenario with large thread-level parallelism discussed previously.


        






[1] http://www.inf.ed.ac.uk/teaching/courses/pa/Papers/billion_chipmultiprocessor.pdf