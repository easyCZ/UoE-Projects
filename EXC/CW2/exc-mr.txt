Student: s1115104
Date: 24-10-2015

Output directory: /user/s1115104/data/output/exc-cw2/

###########################################################
# Task 1
###########################################################

Approach:
    1. Count words in each line and ouput a triple (word, filename, word_count)
    2. Partition output by word, sort primarily by word, secondarily by filename (alphabetically)
    3. Combiner accumulates counts by filename
    4. Reducer produces total counts for all files given a name and also outputs counts for each file

Document Sorting:
    Documents output are sorted alphabeitcally, thefeore d11.txt comes before d2.txt.

Task 1 code begin
Run:
#!/usr/bin/bash
hadoop jar /opt/hadoop/hadoop-2.7.1/share/hadoop/tools/lib/hadoop-streaming-2.7.1.jar \
 -D mapred.reduce.tasks=16 \
 -D mapreduce.job.output.key.comparator.class=org.apache.hadoop.mapreduce.lib.partition.KeyFieldBasedComparator \
 -D stream.num.map.output.key.fields=1 \
 -D num.key.fields.for.partition=1 \
 -D mapreduce.partition.keypartitioner.options=-k1,1 \
 -D mapreduce.partition.keycomparator.options="-k1,1 -k2,2" \
 -D mapreduce.map.output.key.field.separator=" " \
 -input /data/assignments/ex2/task1/large/ \
 -output /user/s1115104/data/output/exc-cw2/s1115104_task_1.out \
 -mapper mapper.py \
 -file mapper.py \
 -combiner combiner.py \
 -file combiner.py \
 -reducer reducer.py \
 -file reducer.py \
 -jobconf mapred.job.name="Inverted Index L" \
 -partitioner org.apache.hadoop.mapred.lib.KeyFieldBasedPartitioner

########################################################
#!/usr/bin/python
# mapper.py
import os
import sys
from collections import Counter

filename = os.environ['mapreduce_map_input_file'].split('/')[-1]

for line in sys.stdin:
    words = line.strip().split()
    if words:
        counter = Counter(words)

        for (word, count) in counter.iteritems():
            print("{0} {1} {2}".format(word, filename, count))

########################################################
#!/usr/bin/python
# combiner.py
import os
import sys

last_word = None
last_filename = None
accumulator = 0

# Input is received sorted by word and by filename
for line in sys.stdin:
    line = line.strip()

    word, filename, count = line.split(' ', 2)

    if last_word is not None and word != last_word:
        print("{0} {1} {2}".format(last_word, last_filename, accumulator))
        accumulator = 0

    last_word = word
    last_filename = filename
    accumulator += int(count)


if last_word is not None:
    print("{0} {1} {2}".format(last_word, last_filename, accumulator))
########################################################
#!/usr/bin/python
# reducer.py
import sys

word_counter = 0
last_word = None
word_documents = []


def write(keyword, total, documents):
    docs = ", ".join(["(%s, %d)" % (doc, count) for doc, count in documents])
    docs = "{%s}" % docs
    print("{0} : {1} : {2}".format(keyword, total, docs))

# Input is sorted primarily by word, secondarily by
# document name. Single pass is required without doing any
# sorting.
#
# Expected input:
#   also        d1.txt  13
#   also        d3.txt  8
#   also        d4.txt  3
#   altered     d5.txt  1
#   althorp     d5.txt  2
for line in sys.stdin:
    word, doc, count = line.split(' ', 2)

    if last_word is not None and last_word != word:
        # Cleanup after last block
        write(last_word, word_counter, word_documents)
        # Start new block
        word_documents = []
        word_counter = 0

    count = int(count)

    last_word = word
    word_counter += count
    word_documents.append((doc, count))

if last_word is not None:
    write(last_word, word_counter, word_documents)

Task 1 code end

Task 1 results begin
"'Ah, : 2 : {(d15.txt, 2)}	
"'Bad : 1 : {(d3.txt, 1)}	
"'Do : 6 : {(d15.txt, 5), (d2.txt, 1)}	
"'It : 5 : {(d15.txt, 4), (d5.txt, 1)}	
"'Listen, : 1 : {(d15.txt, 1)}	
"'Marriage? : 1 : {(d15.txt, 1)}	
"'Permit : 1 : {(d15.txt, 1)}	
"'To : 2 : {(d15.txt, 1), (d2.txt, 1)}	
"'Would : 1 : {(d15.txt, 1)}	
"According : 1 : {(d3.txt, 1)}	
Task 1 results end


###########################################################
# Task 2
###########################################################

Approach:
    Re-use index from part 1
    1. Compute index for the relevant files
    2. Use only mapper job
    2. Load the required terms file (terms.txt)
    3. For each keyword in terms.txt, compute tf-idf given the index
    4. Output only relevant keyword and their scores

Params:
    Mapper accepts two params, the total number of files and the document we are
    looking to caluclate tf-idf for.

Notes:
    Despite running it against only one file, the solution supports N documents.

Task 2 code begin
Run:
Uses code from Task1 to build the index.

#!/usr/bin/bash
export EXC2_2_INPUT=/data/assignments/ex2/task1/large/
export EXC2_2_INDEX=/user/s1115104/data/output/exc-cw2/s1115104_task_2.out/index
export EXC2_2_OUTPUT=/user/s1115104/data/output/exc-cw2/s1115104_task_2.out/score

# Clean up last run
rm ./terms.txt

# Fetch terms to look for
hdfs dfs -get /data/assignments/ex2/terms.txt ./terms.txt

# Build index
hadoop jar /opt/hadoop/hadoop-2.7.1/share/hadoop/tools/lib/hadoop-streaming-2.7.1.jar \
 -D mapred.reduce.tasks=17 \
 -D mapreduce.job.output.key.comparator.class=org.apache.hadoop.mapreduce.lib.partition.KeyFieldBasedComparator \
 -D stream.num.map.output.key.fields=1 \
 -D num.key.fields.for.partition=1 \
 -D mapreduce.partition.keypartitioner.options=-k1,1 \
 -D mapreduce.partition.keycomparator.options="-k1,1 -k2,2" \
 -D mapreduce.map.output.key.field.separator=" " \
 -input $EXC2_2_INPUT \
 -output $EXC2_2_INDEX \
 -mapper ../task1/mapper.py \
 -file ../task1/mapper.py \
 -combiner ../task1/combiner.py \
 -file ../task1/combiner.py \
 -reducer ../task1/reducer.py \
 -file ../task1/reducer.py \
 -jobconf mapred.job.name="Inverted Index L" \
 -partitioner org.apache.hadoop.mapred.lib.KeyFieldBasedPartitioner

# Calculate score
hadoop jar /opt/hadoop/hadoop-2.7.1/share/hadoop/tools/lib/hadoop-streaming-2.7.1.jar \
 -D mapred.reduce.tasks=0 \
 -input $EXC2_2_INDEX \
 -output $EXC2_2_OUTPUT \
 -mapper "mapper.py `hdfs dfs -ls $EXC2_2_INPUT | grep -v "_SUCCESS\|Found" | wc -l` d1.txt"\
 -file mapper.py \
 -jobconf mapred.job.name="TF-IDF L" \
 -file terms.txt

hdfs dfs -cat $EXC2_2_OUTPUT/part-* | head -n 10 > results.txt

########################################################
#!/usr/bin/python
# mapper.py
import os
import sys
import math

# Requires the number of files to map to be part of the input
DOCUMENT_COUNT = int(sys.argv[1])
FILENAME = sys.argv[2]
TERMS = set()

# Build dictionary
with open('terms.txt') as f:
    for term in f:
        term = term.strip()
        TERMS.add(term)

# Input pattern:
# "And : 151 : {(d1.txt, 34), (d10.txt, 4), (d12.txt, 25), (d13.txt, 5), (d15.txt, 19), (d2.txt, 17)}
for line in sys.stdin:
    word, total_count, documents = line.strip().split(' : ', 2)

    # We only care about the items in our dictionary
    if word in TERMS:
        # Serialize the freqencies into workable format
        documents = [document.replace('(', '').replace(')', '') for document in documents[1:-1].split('), ')]
        documents = [tuple(document.split(', ')) for document in documents]

        # Make documents a dict for instant lookup
        documents = dict([(document, int(count)) for document, count in documents])

        tf = documents.get(FILENAME, 0)
        idf = math.log(DOCUMENT_COUNT / (1.0 + len(documents)), 10)
        tf_idf = tf * idf
        print("{0}, {1} = {2}".format(word, FILENAME, tf_idf))

Task 2 code end

Task 2 results begin
Lassiter, d1.txt = 0.0	
family, d1.txt = 1.14151090877	
monument, d1.txt = 0.62838893005	
horse, d1.txt = 2.57155048062	
agreement, d1.txt = 0.531478917042	
child, d1.txt = 6.524311868	
Task 2 results end



###########################################################
# Task 3.1
###########################################################

Approach:
    1. Mapper outputs resource name and count (1)
    2. Combiner aggregates results and emits the most frequent
    2. Reducer receives n results from n combiners, picks the largest


Task 3.1 code begin
Run:
#!/usr/bin/bash
export EXC2_3_1_INPUT=/data/assignments/ex2/task2/logsLarge.txt
export EXC2_3_1_OUTPUT=/user/s1115104/data/output/exc-cw2/s1115104_task_3_1.out

hadoop jar /opt/hadoop/hadoop-2.7.1/share/hadoop/tools/lib/hadoop-streaming-2.7.1.jar \
 -D mapred.reduce.tasks=1 \
 -input $EXC2_3_1_INPUT \
 -output $EXC2_3_1_OUTPUT \
 -mapper mapper.py \
 -file mapper.py \
 -combiner counter.py \
 -file counter.py \
 -reducer counter.py \
 -jobconf mapred.job.name="Logs Popular L"

hdfs dfs -cat $EXC2_3_1_OUTPUT/part-* | head -n 10 > results.txt
########################################################
#!/usr/bin/python
# mapper.py
import sys

# Input:
# in24.inetnebr.com - - [01/Aug/1995:00:00:01 -0400] "GET /shuttle/missions/sts-68/news/sts-68-mcc-05.txt HTTP/1.0" 200 1839
for line in sys.stdin:
    try:
        resource = line.strip().split('"')[1].split()[1]
        print("{0}\t{1}".format(resource, 1))
    except:
        sys.stderr.write("Failed to parse, skipping. Line: {0}\n".format(line.strip()))

########################################################
#!/usr/bin/python
# counter.py
import os
import sys
from collections import namedtuple

MaxCount = namedtuple('MaxCount', ['resource', 'count'])

max_counter = None
resource_counter = 0
last_resource = None


for line in sys.stdin:
    resource, count = line.strip().split('\t', 1)
    count = int(count)

    if max_counter is None:
        max_counter = MaxCount(resource, count)


    if last_resource is not None and resource != last_resource:
        # We received a new resource
        if resource_counter > max_counter.count:
            # We found a new max
            max_counter = MaxCount(last_resource, resource_counter)
        resource_counter = 0

    last_resource = resource
    resource_counter += count



if max_counter:
    if resource_counter > max_counter.count:
        # We found a new max
        max_counter = MaxCount(last_resource, resource_counter)

    print("{0}\t{1}".format(max_counter.resource, max_counter.count))
Task 3.1 code end

Task 3.1 results begin
/images/NASA-logosmall.gif	97410
Task 3.1 results end


###########################################################
# Task 3.2
###########################################################

Approach:
    1. Mapper outputs resource name and count (1)
    2. Combiner aggregates results and emits 10 most frequent
    2. Reducer receives 10 * n results from n combiners, picks the 10 largest


Task 3.2 code begin
Run:
#!/bin/bash

export EXC2_3_2_INPUT=/data/assignments/ex2/task2/logsLarge.txt
export EXC2_3_2_OUTPUT=/user/s1115104/data/output/exc-cw2/s1115104_task_3_2.out

hadoop jar /opt/hadoop/hadoop-2.7.1/share/hadoop/tools/lib/hadoop-streaming-2.7.1.jar \
    -D mapred.reduce.tasks=1 \
    -input $EXC2_3_2_INPUT \
    -output $EXC2_3_2_OUTPUT \
    -mapper mapper.py \
    -combiner counter.py \
    -reducer counter.py \
    -file mapper.py \
    -file counter.py \
    -jobconf mapred.job.name="404: Cat not found."

hdfs dfs -cat $EXC2_3_2_OUTPUT/part-* | head -n 10 > results.txt


########################################################
#!/usr/bin/python
# mapper.py
import sys

# Input:
# in24.inetnebr.com - - [01/Aug/1995:00:00:01 -0400] "GET /shuttle/missions/sts-68/news/sts-68-mcc-05.txt HTTP/1.0" 200 1839
for line in sys.stdin:
    try:
        host, rest = line.strip().split(' - - ')
        time, http, response = rest.strip().split('"')
        code, size = response.strip().split()
        if int(code) == 404:
            print("{0}\t{1}".format(host, 1))
    except:
        sys.stderr.write("Failed to parse, skipping. Line: {0}\n".format(line.strip()))

########################################################
#!/usr/bin/python
# counter.py
import os
import sys
import heapq


MOST_COMMON_THRESH = 10
most_common = []
heapq.heapify(most_common)

last_host = None
last_host_count = 0

for line in sys.stdin:
    host, count = line.strip().split('\t', 1)
    count = int(count)

    if last_host != host:
        # Store the new host
        # Keep a heap of most common items
        if len(most_common) >= MOST_COMMON_THRESH:
            heapq.heappushpop(most_common, (last_host_count, last_host))
        else:
            heapq.heappush(most_common, (last_host_count, last_host))

        last_host_count = 0
    
    last_host = host
    last_host_count += count

for (count, host) in heapq.nlargest(MOST_COMMON_THRESH, most_common):
    print("{0}\t{1}".format(host, count))


Task 3.2 code end

Task 3.2 results begin
dialip-217.den.mmc.com	62
155.148.25.4	44
maz3.maz.net	39
gate.barr.com	38
ts8-1.westwood.ts.ucla.edu	37
nexus.mlckew.edu.au	37
m38-370-9.mit.edu	37
piweba3y.prodigy.com	35
reddragon.ksc.nasa.gov	33
204.62.245.32	29
Task 3.2 results end


###########################################################
# Task 3.3
###########################################################

Task 3.3 code begin
Run:
#!/bin/bash

export EXC2_3_3_INPUT=/data/assignments/ex2/task2/logsLarge.txt
export EXC2_3_3_OUTPUT=/user/s1115104/data/output/exc-cw2/s1115104_task_3_3.out

hadoop jar /opt/hadoop/hadoop-2.7.1/share/hadoop/tools/lib/hadoop-streaming-2.7.1.jar \
    -D mapred.reduce.tasks=16 \
    -D mapreduce.job.output.key.comparator.class=org.apache.hadoop.mapreduce.lib.partition.KeyFieldBasedComparator \
    -D stream.num.map.output.key.fields=1 \
    -D num.key.fields.for.partition=1 \
    -D mapreduce.partition.keypartitioner.options=-k1,1 \
    -D mapreduce.partition.keycomparator.options="-k1,1 -k2,2n" \
    -D mapreduce.map.output.key.field.separator=" " \
    -input $EXC2_3_3_INPUT \
    -output $EXC2_3_3_OUTPUT \
    -mapper mapper.py \
    -combiner combiner.py \
    -reducer reducer.py \
    -file mapper.py \
    -file combiner.py \
    -file reducer.py \
    -jobconf mapred.job.name="How long did you stay around? EXC2 3.3 L" \
    -partitioner org.apache.hadoop.mapred.lib.KeyFieldBasedPartitioner

hdfs dfs -cat $EXC2_3_3_OUTPUT/part-* | head -n 10 > results.txt

########################################################
#!/usr/bin/python
# mapper.py
import sys
from datetime import datetime


def parse_datetime(dt):
    timestamp = dt.split()[0]
    return datetime.strptime(timestamp, '%d/%b/%Y:%H:%M:%S')


def get_timestamp(dt):
    return (dt - datetime(1970, 1, 1)).total_seconds()

# Input:
# in24.inetnebr.com - - [01/Aug/1995:00:00:01 -0400] "GET /shuttle/missions/sts-68/news/sts-68-mcc-05.txt HTTP/1.0" 200 1839
#
# Output:
# in24.inetnebr.com     <unix timestamp>
for line in sys.stdin:
    try:
        host, rest = line.strip().split(' - - ')
        time, _ = rest.strip().split('"', 1)
        time = time.replace('[', '').replace(']', '').strip()
        timestamp = get_timestamp(parse_datetime(time))

        # Maintain the actual time information as well for output reasons, timestamps lose timezone info
        print("{0} {1} {2}".format(host, int(timestamp), time))

    except:
        sys.stderr.write("Failed to parse, skipping. Line: {0}\n".format(line.strip()))

########################################################
#!/usr/bin/python
# range.py
import sys
from collections import namedtuple

AccessRange = namedtuple('AccessRange', ['host', 'time_from', 'time_to'])

# Input:
# 1.ts2.mnet.medstroms.se 807657230 05/Aug/1995:17:13:50 -0400
# 1.ts2.mnet.medstroms.se 807657240 05/Aug/1995:17:14:00 -0400
# 1.ts2.mnet.medstroms.se 807657248 05/Aug/1995:17:14:08 -0400
# 1.ts2.mnet.medstroms.se 807657248 05/Aug/1995:17:14:08 -0400
# 11.ts1.mnet.medstroms.se 807637425 05/Aug/1995:11:43:45 -0400
#
# Output:
# 1.ts2.mnet.medstroms.se 807657230 05/Aug/1995:17:13:50 -0400
# 1.ts2.mnet.medstroms.se 807657248 05/Aug/1995:17:14:08 -0400
# 11.ts1.mnet.medstroms.se 807637425 05/Aug/1995:11:43:45 -0400
#
# Approach:
#   * Input is sorted by host and secondarily sorted by UNIX timestamp
#   * Keep track of the first visit and find the last row for the same host
#   * Output the start time and optionally the last time

def write(acs_range):
    # Write <hostname> <timestamp> <datetime>
    print('{0} {1} {2}'.format(acs_range.host, acs_range.time_from[0], acs_range.time_from[1]))
    # Start and end is different
    if acs_range.time_to and acs_range.time_from[0] != acs_range.time_to[0]:
        print('{0} {1} {2}'.format(acs_range.host, acs_range.time_to[0], acs_range.time_to[1]))

access_range = None

for line in sys.stdin:
    host, timestamp, datetime = line.strip().split(' ', 2)

    if not access_range:
        # Initialize
        access_range = AccessRange(host, (timestamp, datetime), None)

    if access_range.host != host:
        write(access_range)

        # New host row
        access_range = AccessRange(host, (timestamp, datetime), None)
    else:
        # The same host again, update end time
        access_range = AccessRange(access_range.host, access_range.time_from, (timestamp, datetime))

# Write the final
if access_range:
    write(access_range)
########################################################
#!/usr/bin/python
# range.py
import sys
from collections import namedtuple

AccessRange = namedtuple('AccessRange', ['host', 'time_from', 'time_to'])

# Input:
# 1.ts2.mnet.medstroms.se 807657230 05/Aug/1995:17:13:50 -0400
# 1.ts2.mnet.medstroms.se 807657248 05/Aug/1995:17:14:08 -0400
# 11.ts1.mnet.medstroms.se 807637425 05/Aug/1995:11:43:45 -0400
#
# Output:
# <hostname>    <seconds from first to last visit>  [<first_visit>]   [<last_visit>]
# Or when only a single visit:
# <hostname>    0  [<first_visit>]   [<first_visit>]
#
# Ie:
# 1.ts2.mnet.medstroms.se 18 [05/Aug/1995:17:13:50 -0400] [05/Aug/1995:17:14:08 -0400]
# 11.ts1.mnet.medstroms.se 0 [05/Aug/1995:11:43:45 -0400] [05/Aug/1995:11:43:45 -0400]
#
# Approach:
#   * Input is sorted by host and secondarily sorted by UNIX timestamp
#   * Keep track of the first visit and find the last row for the same host
#
# Notes:
#   * The amount of data output is slightly more than just the time difference
#     but knowing the host and the length of the stay as well as the timestamps
#     is more useful and better parseable

def write(acs_range):
    delta = 0
    datetime_from = acs_range.time_from[1]
    datetime_to = acs_range.time_from[1]

    if acs_range.time_to:
        delta = int(abs(int(acs_range.time_to[0]) - int(acs_range.time_from[0])))
        datetime_to = acs_range.time_to[1]

    print('{0}\t{1}\t{2}\t{3}'.format(acs_range.host, delta, datetime_from, datetime_to))


access_range = None

for line in sys.stdin:
    host, timestamp, datetime = line.strip().split(' ', 2)

    if not access_range:
        # Initialize
        access_range = AccessRange(host, (timestamp, datetime), None)

    if access_range.host != host:
        write(access_range)

        # New host row
        access_range = AccessRange(host, (timestamp, datetime), None)
    else:
        # The same host again, update end time
        access_range = AccessRange(access_range.host, access_range.time_from, (timestamp, datetime))

# Write the final
if access_range:
    write(access_range)
Task 3.3 code end

Task 3.3 results begin
02-17-05.comsvc.calpoly.edu	182	28/Aug/1995:11:02:36 -0400	28/Aug/1995:11:05:38 -0400
10md423.uni-duisburg.de	3497	15/Aug/1995:05:11:33 -0400	15/Aug/1995:06:09:50 -0400
128.100.178.11	2	11/Aug/1995:08:48:25 -0400	11/Aug/1995:08:48:27 -0400
128.100.80.97	83	16/Aug/1995:12:16:50 -0400	16/Aug/1995:12:18:13 -0400
128.103.196.21	243	21/Aug/1995:22:40:15 -0400	21/Aug/1995:22:44:18 -0400
128.104.225.29	135	25/Aug/1995:18:31:19 -0400	25/Aug/1995:18:33:34 -0400
128.114.23.37	181	12/Aug/1995:17:04:38 -0400	12/Aug/1995:17:07:39 -0400
128.119.50.139	3509	03/Aug/1995:13:27:57 -0400	03/Aug/1995:14:26:26 -0400
128.120.71.79	2	13/Aug/1995:22:13:44 -0400	13/Aug/1995:22:13:46 -0400
128.138.243.150	0	03/Aug/1995:13:48:34 -0400	03/Aug/1995:13:48:34 -0400
Task 3.3 results end


###########################################################
# Task 4.1
###########################################################

Task 4.1 code begin
Run:
#!/bin/bash

export EXC2_4_1_INPUT=/data/assignments/ex2/task3/stackLarge.txt
export EXC2_4_1_OUTPUT=/user/s1115104/data/output/exc-cw2/s1115104_task_4_1.out

hadoop jar /opt/hadoop/hadoop-2.7.1/share/hadoop/tools/lib/hadoop-streaming-2.7.1.jar \
    -D mapred.job.name="Stack Overflow while Stack Overflow!? EXC 2 4-1 L" \
    -D mapred.reduce.tasks=1 \
    -input $EXC2_4_1_INPUT \
    -output $EXC2_4_1_OUTPUT \
    -mapper mapper.py \
    -reducer reducer.py \
    -file mapper.py \
    -file reducer.py

hdfs dfs -cat $EXC2_4_1_OUTPUT/part-* | head -n 10 > results.txt


########################################################
#!/usr/bin/python
# mapper.py
import sys
import heapq
import xml.etree.ElementTree as xml


POST_TYPE_ID = 'PostTypeId'
VIEW_COUNT = 'ViewCount'
POST_ID = 'Id'

QUESTION_TYPE_ID = '1'

MOST_COMMON_THRESHOLD = 10
most_common = []
heapq.heapify(most_common)


def is_question(post_type): return post_type == QUESTION_TYPE_ID

# Approach:
#   * Keep track of the 10 most popular posts in memory
#   * Output 10 entries per each mapper
for line in sys.stdin:
    content = xml.fromstring(line.strip())
    attributes = content.attrib
    if is_question(attributes[POST_TYPE_ID]):
        view_count = int(attributes[VIEW_COUNT])
        count_id = (view_count, attributes[POST_ID])

        if len(most_common) >= MOST_COMMON_THRESHOLD:
            heapq.heappushpop(most_common, count_id)
        else:
            heapq.heappush(most_common, count_id)

# Print the heap
for count, post_id in heapq.nlargest(MOST_COMMON_THRESHOLD, most_common):
    print('{0}\t{1}'.format(post_id, count))
########################################################
#!/usr/bin/python
# counter.py
import sys
import heapq


MOST_COMMON_THRESHOLD = 10
most_common = []
heapq.heapify(most_common)

# Approach:
#   * Will receive 10 entries per each mapper
#   * Runs only 1 reducer
#   * Keeps track of the 10 most popular in memory
#   * Outputs the 10 most popular
for line in sys.stdin:
    post_id, count = line.split('\t', 1)
    count = int(count)
    count_id = (count, post_id)

    if len(most_common) >= MOST_COMMON_THRESHOLD:
        heapq.heappushpop(most_common, count_id)
    else:
        heapq.heappush(most_common, count_id)

# Print the heap
for count, post_id in heapq.nlargest(MOST_COMMON_THRESHOLD, most_common):
    print('{0}, {1}'.format(post_id, count))
Task 4.1 code end

Task 4.1 results begin
184618, 1782717	
503093, 1240007	
25969, 1075873	
194812, 1058604	
426258, 989328	
363681, 978463	
114543, 962440	
134845, 938463	
306583, 913899	
63447, 868645	
Task 4.1 results end


###########################################################
# Task 4.2
###########################################################

Task 4.2 code begin
Run:
#!/bin/bash

export EXC2_4_2_INPUT=/data/assignments/ex2/task3/stackLarge.txt
export EXC2_4_2_OUTPUT=/user/s1115104/data/output/exc-cw2/s1115104_task_4_2.out

hadoop jar /opt/hadoop/hadoop-2.7.1/share/hadoop/tools/lib/hadoop-streaming-2.7.1.jar \
    -D mapred.job.name="WANTED: StackOverflow superhero! EXC 2 4-2 L" \
    -D mapred.reduce.tasks=1 \
    -input $EXC2_4_2_INPUT \
    -output $EXC2_4_2_OUTPUT \
    -mapper mapper.py \
    -combiner combiner.py \
    -reducer reducer.py \
    -file mapper.py \
    -file combiner.py \
    -file reducer.py

hdfs dfs -cat $EXC2_4_2_OUTPUT/part-* | head -n 10 > results.txt


########################################################
#!/usr/bin/python
# mapper.py
import sys
import xml.etree.ElementTree as xml


POST_TYPE_ID = 'PostTypeId'
PARENT_ID = 'ParentId'
ANSWER_USER_ID = 'OwnerUserId'

ANSWER_TYPE_ID = '2'


def is_answer(post_type): return post_type == ANSWER_TYPE_ID

for line in sys.stdin:
    content = xml.fromstring(line.strip())
    attributes = content.attrib

    if is_answer(attributes[POST_TYPE_ID]):
        user = attributes.get(ANSWER_USER_ID, None)
        post_id = attributes.get(PARENT_ID, None)

        # Skip results without proper attributes
        if user and post_id:
            print('{0}\t{1}'.format(user, post_id))
        else:
            sys.stderr.write("Could not retrieve name and post_id in {0}\n".format(attributes))

########################################################
#!/usr/bin/python
# counter.py
import sys
from collections import namedtuple

UserPosts = namedtuple('UserPosts', ['user', 'posts'])


so_superhero = None
current_user = None

for line in sys.stdin:
    user_id, posts = line.strip().split('\t', 1)
    posts = posts.split(', ')

    if not so_superhero:
        # Init
        so_superhero = UserPosts(user_id, [])
        current_user = UserPosts(user_id, [])

    if user_id != current_user.user:
        # Got a new user segment

        # Do we have a new hero?
        if len(current_user.posts) > len(so_superhero.posts):
            so_superhero = current_user

        current_user = UserPosts(user_id, [])

    current_user.posts.extend(posts)

if so_superhero:
    print('{0} -> {1}'.format(so_superhero.user, ', '.join(so_superhero.posts)))
Task 4.2 code end

Task 4.2 results begin
22656 -> 272949, 287142, 217678, 344630, 298289, 227820, 315146, 267765, 271384, 213985, 364986, 269613, 285087, 240837, 252817, 309071, 321096, 359085, 210353, 209281, 269594, 342151, 293254, 257462, 324066, 295224, 316532, 233475, 360241, 261428, 302032, 233711, 222819, 304782, 295402, 295287, 298503, 219851, 317026, 337744, 252257, 337029, 246108, 287663, 300499, 257331, 337702, 278703, 269988, 331217, 286399, 214809, 275944, 313584, 335807, 242930, 258204, 267059, 234591, 283241, 271440, 258988, 336831, 302303, 277869, 337121, 330963, 304640, 309286, 272013, 318775, 359625, 210079, 243811, 253492, 338895, 233243, 204739, 290602, 271767, 326098, 273949, 229508, 217980, 238660, 252775, 352592, 277710, 242745, 355787, 283143, 243045, 337334, 333242, 353342, 342106, 315358, 301365, 356785, 288061, 286533, 271613, 337239, 207889, 207888, 208325, 240863, 300376, 325511, 362441, 225233, 211958, 289770, 293114, 336649, 290304, 265639, 317335, 337144, 361371, 309939, 349904, 258567, 291415, 246498, 289496, 268018, 301510, 343869, 246495, 283749, 204468, 350991, 259900, 236676, 308683, 298972, 334838, 298976, 285846, 201933, 266923, 274585, 259887, 221037, 223249, 291286, 271530, 209415, 324656, 280980, 217645, 299129, 271404, 292265, 352234, 358894, 352433, 302037, 253673, 264196, 323230, 246389, 247241, 323235, 238413, 339862, 198543, 337903, 228796, 317084, 280127, 269310, 284093, 290645, 234341, 242393, 281276, 261809, 232732, 283476, 302157, 362955, 355933, 218025, 334658, 352618, 336387, 358714, 233288, 289452, 207867, 340090, 229015, 7074, 290527, 324053, 244192, 230869, 255553, 253211, 236878, 281970, 360151, 276472, 284678, 339755, 284896, 339699, 313753, 358546, 353224, 316674, 364009, 280270, 271710, 349460, 245607, 325524, 246038, 362278, 347156, 229554, 233216, 229656, 307984, 320767, 229346, 232863, 290227, 266776, 362059, 362112, 359320, 212401, 247455, 263191, 201607, 309706, 324727, 240219, 294216, 213333, 254037, 320542, 339952, 343675, 311710, 240090, 303502, 313729, 268013, 235250, 229886, 359935, 321566, 204505, 225717, 257519, 259726, 214017, 340298, 277260, 349724, 282028, 349280, 227575, 326648, 353131, 336755, 225953, 341957, 359436, 298277, 231767, 244811, 221154, 352471, 258120, 352472, 256566, 239905, 340507, 343100, 321418, 224537, 305755, 241336, 316582, 360234, 290189, 280755, 233081, 251868, 261028, 358196, 324604, 266308, 259751, 227485, 295005, 221804, 333655, 246270, 258339, 255813, 312184, 287551, 276203, 266901, 241238, 280114, 218888, 280172, 277018, 362042, 271490, 242695, 308986, 238606, 222790, 263023, 242517, 325561, 317606, 202271, 241405, 275073, 219519, 241537, 283374, 297471, 306212, 256077, 207521, 299703, 304488, 353491, 291080, 286632, 304483, 268393, 338712, 253549, 317816, 289845, 201255, 200079, 205411, 339912, 362424, 239645, 359206, 330318, 295110, 206198, 258691, 289307, 209304, 301354, 233850, 362632, 244772, 290819, 313036, 255098, 292676, 348120, 348122, 323032, 294553, 212614, 239888, 253468, 265585, 258285, 306085, 198419, 262547, 298458, 242614, 309734, 283763, 329129, 295579, 218461, 238547, 309631, 231480, 208263, 285238, 324341, 213480, 214584, 327460, 265097, 208835, 200785, 363549, 274172, 350120, 225985, 207829, 340546, 295731, 265106, 344327, 251946, 271520, 261062, 232535, 204208, 299117, 295128, 226967, 300402, 230454, 239306, 223549, 240258, 334415, 317134, 320814, 231159, 342270, 336781, 344363, 282037, 257045, 305651, 304967, 287195, 208193, 244826, 221691, 254784, 317619, 264617, 308427, 244135, 232748, 222511, 346313, 222457, 284063, 263347, 251937, 333151, 264984, 241470, 210020, 265849, 313910, 282086, 253993, 253226, 301618, 268513, 226664, 212028, 235003, 362150, 343852, 272814, 287899, 252014, 305244, 362740, 312471, 348175, 264718, 314108, 291340, 283492, 314100, 304816, 281210, 286481, 219604, 355620, 261086, 330622, 345562, 261126, 262618, 305911, 323079, 309553, 281933, 336884, 242225, 309496, 343968, 365086, 208119, 259929, 262887, 234379, 238583, 293882, 360111, 317825, 314779, 305140, 278039, 305393, 362111, 342080, 265147, 299515, 346722, 281325, 255341, 227731, 258486, 239202, 209354, 205458, 208876, 295161, 262089, 312103, 317462, 285292, 270630, 271561, 266115, 337925, 341949, 270187, 204970, 253399, 293814, 353028, 218781, 281036, 208532, 355282, 265919, 240836, 211477, 298305, 362124, 341029, 244949, 305154, 221001, 327332, 270268, 349192, 227486, 346211, 280426, 232545, 350240, 295387, 343491, 253780, 257251, 215421, 324670, 340128, 287646, 317047, 326820, 295017, 208124, 295736, 290061, 214136, 323212, 277211, 215458, 344034, 315139, 251987, 335450, 240638, 253937, 269669, 215213, 280634, 284336, 348037, 326223, 286605, 269058, 209389, 302371, 221378, 316727, 316548, 256065, 352415, 252751, 242264, 339792, 217805, 255797, 362224, 240122, 326757, 333736, 208753, 291828, 229076, 232781, 271615, 277732, 229254, 198079, 296783, 329203, 341848, 316656, 298139, 320396, 314033, 341847, 300055, 261177, 213638, 227083, 358645, 319864, 344503, 266825, 213637, 210123, 263151, 234239, 263400, 283513, 206512, 283511, 225194, 254096, 316855, 277351, 288794, 254273, 277783, 343366, 287598, 200689, 287592, 214688, 212429, 242718, 343466, 346721, 229797, 253058, 296650, 293916, 238555, 283679, 225073, 317788, 222601, 355875, 362555, 222015, 299950, 204564, 205568, 285793, 244881, 364155, 287684, 334579, 355340, 313127, 308954, 265370, 299475, 287178, 237041, 257052, 217707, 262110, 221824, 271398, 221687, 268671, 233123, 200239, 278649, 211448, 253757, 342268, 352117, 265208, 295593, 247621, 271347, 273301, 337165, 240047, 285177, 362326, 347235, 208056, 329029, 301393, 288808, 252793, 335517, 304389, 356972, 334779, 311363, 255976, 246112, 237377, 241148, 263614, 277210, 337038, 219815, 267830, 282099, 279374, 216008, 214814, 252893, 283487, 264575, 201440, 233579, 215144, 267076, 309161, 343684, 264496, 352089, 356091, 337254, 277857, 236861, 348964, 302476, 270771, 207662, 325156, 204627, 359732, 349442, 292536, 330502, 238675, 212089, 313062, 218744, 333737, 203695, 219618, 296755, 200151, 349742, 208184, 270148, 270747, 269578, 314008, 246572, 201930, 204343, 352177, 207896, 295670, 327286, 272153, 321549, 321423, 204139, 333829, 296978, 313111, 229211, 208969, 293256, 349369, 301809, 212263, 242438, 203863, 287037, 341971, 295626, 200691, 262480, 229844, 228987, 343358, 302096, 268652, 336775, 330155, 308061, 352266, 293007, 291413, 211567, 282317, 231741, 270093, 299987, 340525, 206539, 222182, 255063, 206532, 234059, 276319, 277309, 276253, 255644, 220887, 232558, 280439, 285523, 278075, 233382, 282468, 246096, 304770, 259676, 276383, 233013, 344380, 268251, 253664, 283669, 325725, 277319, 299135, 262096, 299439, 338262, 304859, 211143, 269303, 253460, 200319, 347242, 305358, 277814, 243379, 326390, 208381, 231525, 242904, 334179, 233905, 222245, 305519, 266292, 225686, 235455, 278488, 278362, 212124, 235025, 316911, 336414, 262469, 346365, 235446, 291387, 268530, 241134, 205099, 201479, 280896, 325267, 343457, 339747, 238490, 294138, 242400, 314203, 319789, 255645, 261387, 346762, 254099, 223679, 254009, 292988, 266818, 286508, 294171, 358654, 213045, 234990, 207592, 362719, 242577, 233207, 200574, 221287, 301965, 239865, 254260, 268321, 301960, 200755, 228945, 295749, 234008, 290238, 363596, 338024, 327916, 270091, 237159, 201616, 349410, 293905, 262367, 221925, 272368, 293900, 218322, 333280, 212902, 333364, 363569, 349251, 245058, 349256, 333953, 234994, 266716, 300489, 137454, 194165, 187414, 190376, 190299, 153573, 176267, 188184, 161184, 148882, 162007, 155209, 161942, 194496, 187576, 156430, 146358, 146204, 141467, 154551, 176196, 164192, 177363, 162303, 144516, 137448, 183856, 161633, 178976, 188769, 164369, 137688, 174585, 161432, 197005, 139260, 149233, 145856, 183315, 194464, 181643, 155780, 185072, 143947, 131871, 171332, 153048, 183250, 188693, 197482, 187989, 183473, 162727, 9033, 173080, 183479, 152313, 164144, 186653, 174498, 194676, 178888, 185690, 157055, 197302, 157219, 178255, 157354, 188688, 164425, 157198, 141423, 187068, 182600, 162112, 161822, 154680, 188510, 168150, 188141, 186643, 154463, 161556, 177506, 173272, 186007, 190227, 186082, 142003, 168393, 154112, 182683, 194528, 149211, 182440, 155378, 145509, 176264, 197174, 196936, 168169, 188120, 191333, 139837, 187602, 162879, 169378, 144176, 161231, 194450, 143997, 197241, 195606, 156369, 146155, 177373, 187289, 181427, 162335, 178333, 185987, 164643, 183367, 183685, 145371, 155260, 161477, 192599, 152613, 171664, 177538, 187983, 144783, 174155, 179337, 186115, 187695, 139592, 186467, 171717, 193873, 178516, 192121, 191151, 187742, 191153, 194436, 186385, 182749, 148074, 159705, 197182, 177836, 178026, 177835, 185124, 163183, 188977, 157254, 183033, 155458, 193731, 164468, 154489, 162571, 188134, 196094, 186527, 169220, 186964, 176106, 187633, 151936, 188864, 157557, 174662, 178188, 194304, 152900, 154483, 148298, 186600, 190936, 148078, 186523, 156815, 162696, 197297, 186891, 392787, 374651, 481725, 405336, 512166, 456935, 524495, 424586, 507936, 370920, 427799, 506092, 451228, 506648, 483333, 375014, 474184, 510863, 387893, 460300, 510949, 445915, 393152, 481122, 493177, 436759, 450350, 411592, 516768, 372075, 378856, 374535, 383775, 491375, 417954, 420623, 516160, 423865, 405333, 425988, 433475, 480973, 474450, 474451, 367905, 490896, 411447, 410417, 476049, 493311, 495471, 401415, 386183, 413095, 495004, 489304, 516309, 470789, 474535, 403058, 514564, 484212, 454870, 481334, 421797, 427909, 365615, 493494, 427902, 516399, 493490, 433106, 434737, 469899, 443687, 464889, 519929, 488808, 499393, 439897, 436700, 407402, 468832, 457970, 510341, 402430, 503789, 387198, 453479, 461893, 464471, 516788, 525413, 446474, 399770, 398117, 492539, 368170, 513335, 400900, 434039, 383551, 445883, 430403, 380775, 439298, 493033, 483215, 398378, 476217, 462793, 497699, 484562, 503263, 380451, 367577, 406463, 380512, 374934, 370852, 371702, 370501, 379041, 504645, 519675, 464852, 389426, 474259, 440016, 474315, 450617, 524062, 410692, 452296, 524503, 490850, 406791, 409852, 520280, 468062, 424760, 395232, 408101, 524066, 380198, 371026, 483054, 370820, 390108, 502346, 427941, 436807, 385709, 514948, 525364, 439541, 478968, 388375, 371418, 454891, 507747, 508026, 525425, 385688, 490677, 511477, 408452, 443239, 453538, 517751, 474841, 403088, 519515, 479883, 450463, 373541, 468266, 487046, 388775, 488601, 384489, 479966, 459538, 514953, 478135, 406293, 460576, 402517, 510376, 434666, 440204, 508054, 446320, 431311, 380639, 482560, 457482, 380632, 473087, 378259, 406361, 386493, 496704, 430145, 460371, 377218, 477965, 524483, 481068, 519631, 371987, 446663, 366897, 374398, 367626, 427725, 486749, 442265, 443980, 475825, 419796, 462311, 443010, 480033, 393169, 419554, 476534, 407983, 414896, 419952, 412380, 413311, 482466, 419954, 432833, 498636, 519645, 460755, 460733, 443403, 444008, 401945, 489173, 460815, 431091, 487258, 464941, 503139, 368806, 386584, 515975, 453359, 489258, 389813, 405352, 502415, 489317, 447408, 479565, 388431, 397760, 431785, 465706, 398212, 462167, 495228, 401348, 396143, 495616, 443936, 443935, 389822, 461475, 375881, 515590, 436716, 427756, 483702, 434626, 399760, 439814, 479081, 438188, 425226, 516637, 385949, 435729, 386741, 433188, 388708, 411478, 374215, 460404, 411572, 399768, 439166, 508126, 490728, 511093, 465238, 394898, 380665, 405600, 521505, 393322, 466946, 434890, 411579, 406253, 377245, 420774, 520290, 487682, 445984, 512266, 424443, 380595, 477351, 418983, 514833, 409969, 462348, 480319, 409846, 421851, 452281, 423794, 516964, 515787, 493673, 468372, 439255, 386544, 384262, 423840, 419788, 471693, 402936, 399798, 512401, 439617, 503996, 524428, 370831, 493947, 413825, 496472, 468388, 464831, 411500, 385841, 396621, 394921, 396005, 414749, 414746, 370401, 442019, 462699, 453023, 519520, 400022, 410026, 462697, 414328, 466799, 481314, 468273, 486948, 399648, 495273, 453820, 446702, 391557, 446706, 523194, 423247, 507649, 374316, 482986, 384511, 455420, 523359, 451035, 474057, 504103, 438492, 457287, 516569, 443310, 453451, 496096, 522222, 374790, 380626, 506807, 520527, 406351, 458225, 450820, 374553, 455237, 497508, 460364, 508085, 406433, 504367, 374673, 520030, 493388, 408310, 477399, 409716, 409807, 407255, 460562, 476422, 446835, 443000, 525319, 420646, 460846, 437026, 384633, 465627, 512527, 448158, 205138, 385809, 368832, 448206, 515269, 425132, 487485, 480263, 431839, 464874, 392135, 420895, 366332, 470311, 424920, 427217, 487065, 395314, 454250, 400100, 420541, 475794, 450410, 389993, 438715, 426505, 367814, 481211, 380274, 380081, 386500, 515631, 451078, 406850, 510319, 451647, 396191, 463029, 427363, 442022, 417699, 394957, 398170, 412435, 474564, 420867, 447186, 458460, 388718, 489485, 365489, 520400, 469982, 503218, 478150, 470944, 466841, 374734, 428924, 434761, 375831, 462879, 461439, 411631, 507343, 409611, 480007, 470724, 380755, 461988, 390900, 393701, 459560, 434888, 366852, 481714, 431967, 453738, 421801, 406760, 509193, 453163, 513672, 499210, 460698, 370938, 465313, 442245, 487441, 520064, 511378, 475843, 386088, 472488, 418064, 424743, 380885, 433526, 472137, 443423, 442425, 500431, 420617, 392266, 516882, 370801, 386017, 385730, 485240, 412839, 414290, 400861, 400866, 427980, 439302, 511921, 388353, 486420, 502430, 448629, 523624, 448258, 510477, 481846, 500508, 452743, 367823, 524567, 456786, 411517, 411515, 448653, 428001, 431203, 413597, 454218, 370707, 519914, 446303, 386341, 446262, 452120, 436736, 523431, 451004, 513234, 375940, 379282, 372087, 473998, 442924, 491735, 446462, 449760, 375544, 439974, 444909, 374014, 374940, 503898, 417039, 415291, 449002, 519324, 478167, 503383, 371604, 412763, 491646, 438431, 443170, 451099, 409727, 378118, 417878, 459554, 443466, 374262, 476163, 372639, 455409, 486784, 479105, 519484, 463302, 453059, 457128, 460223, 385893, 506295, 388439, 388822, 429890, 490860, 524081, 466565, 384247, 424775, 372033, 516689, 520922, 392083, 442678, 476676, 466560, 503877, 366345, 463419, 405288, 436954, 452902, 428896, 385714, 453186, 412864, 396009, 428617, 388365, 383735, 491780, 485398, 371930, 516617, 384401, 468914, 519461, 385966, 477750, 450474, 510214, 458518, 448320, 388642, 405379, 391462, 521687, 371398, 439086, 504500, 409765, 446483, 524351, 516463, 480389, 406830, 470984, 469657, 492454, 477101, 500832, 464731, 401232, 385913, 503427, 453879, 405429, 634777, 653882, 564557, 582550, 552909, 538695, 604252, 611433, 571265, 641727, 646794, 602326, 656373, 610001, 621633, 636266, 608530, 542915, 555871, 629955, 626328, 625928, 615334, 658506, 561891, 554159, 565075, 645836, 625465, 638171, 657318, 618909, 654802, 625513, 612592, 600651, 573325, 550702, 531380, 641911, 532588, 585306, 549606, 597012, 638881, 547946, 528999, 595110, 658614, 629758, 533767, 612283, 657263, 592064, 542766, 586193, 628843, 555750, 596339, 564816, 589943, 651462, 644342, 577868, 648692, 586436, 556265, 531315, 610818, 654664, 623243, 623242, 578152, 619716, 561762, 595762, 581318, 618276, 527819, 570560, 601674, 564961, 647425, 568780, 535531, 654752, 657685, 573692, 648003, 605859, 651032, 622763, 527766, 556310, 639320, 646742, 631099, 580257, 631484, 635640, 638222, 569109, 642005, 543473, 656325, 658654, 552844, 570471, 545457, 551111, 654906, 638115, 590122, 610199, 629712, 585860, 620546, 629910, 596065, 655751, 638142, 594268, 649962, 555796, 632383, 555799, 598640, 632148, 650898, 615105, 643775, 656564, 606902, 534793, 568671, 612178, 548007, 566437, 564938, 585344, 590991, 591507, 578211, 626924, 619448, 549382, 596367, 577749, 643422, 589870, 605417, 534807, 636046, 659529, 556133, 630464, 649428, 535572, 631994, 619434, 538121, 605891, 597788, 619197, 645678, 576979, 647413, 570452, 597675, 655803, 581343, 529999, 626139, 534718, 606642, 626132, 608525, 642123, 637960, 594230, 622710, 647779, 630605, 531759, 648196, 645826, 655657, 540634, 573882, 577358, 536378, 648160, 601497, 549755, 529088, 553905, 653674, 570123, 610458, 620484, 600607, 638701, 626910, 623159, 545421, 630045, 657573, 549274, 573026, 559274, 618966, 620376, 637672, 613699, 640502, 542770, 554767, 577132, 601804, 629411, 610603, 597819, 534846, 527953, 534531, 654715, 566418, 533332, 586284, 626707, 658868, 581714, 560123, 585725, 536449, 657112, 586116, 647815, 627478, 625687, 582725, 653469, 620024, 572647, 534690, 591951, 566185, 618267, 566655, 605526, 543318, 538426, 526555, 556006, 647453, 575173, 596465, 625611, 531976, 605441, 626196, 627507, 594378, 626058, 629798, 527234, 659148, 533858, 536971, 575217, 646779, 609501, 651283, 580896, 612486, 570302, 556526, 631550, 608453, 543263, 632606, 601436, 612689, 594208, 552857, 533872, 565095, 658644, 653738, 619033, 557159, 649471, 651055, 600525, 540708, 581722, 620534, 610026, 583414, 592824, 593808, 581949, 620198, 648576, 632399, 586087, 553857, 618148, 605498, 631919, 656072, 533379, 655328, 569614, 541936, 614542, 589737, 536798, 552421, 533426, 585372, 639166, 607377, 528122, 640613, 552472, 627730, 610732, 589967, 589966, 647499, 577280, 564935, 626935, 593730, 615168, 651682, 619856, 631825, 626889, 582095, 558010, 619912, 540248, 627982, 639292, 559779, 634693, 608542, 618216, 574868, 591632, 634829, 610743, 647403, 573231, 657664, 574787, 580590, 599976, 570153, 553536, 642058, 564699, 579676, 550571, 531151, 648188, 602279, 557112, 628049, 552612, 624116, 576912, 533922, 593026, 625340, 648115, 629804, 608057, 633585, 545671, 641931, 576660, 555929, 540876, 589774, 551173, 584134, 533831, 586352, 591144, 656431, 535720, 538281, 581405, 533464, 606997, 640651, 541487, 569714, 582284, 582287, 607130, 527947, 550536, 595399, 544449, 643050, 635841, 611295, 561528, 605726, 566411, 643694, 554276, 605682, 645533, 574824, 627742, 657735, 577403, 618878, 564303, 590162, 533042, 569877, 644715, 578231, 609293, 605533, 651803, 651419, 657037, 652512, 627267, 527685, 622743, 626187, 582575, 608028, 538729, 553035, 531520, 556510, 606109, 630808, 588319, 575202, 590231, 655289, 528372, 583123, 580887, 589351, 570338, 640302, 640307, 566167, 642933, 526246, 568616, 533881, 626115, 573584, 581590, 614713, 580905, 648700, 573621, 533902, 540947, 605828, 576740, 573050, 585969, 573194, 581448, 601974, 594923, 631499, 535972, 536396, 625947, 592934, 592933, 603727, 641906, 545885, 551142, 598702, 653154, 574019, 568751, 556203, 561365, 573655, 540430, 544249, 610870, 549701, 559254, 574809, 585406, 566860, 607587, 586363, 525711, 653596, 612058, 618292, 573539, 595810, 532935, 550143, 573439, 577427, 537174, 586262, 555982, 568724, 625640, 554044, 634664, 618182, 606636, 535328, 634727, 624217, 570376, 574972, 638828, 533171, 573384, 585031, 596549, 651399, 638216, 653730, 570578, 584549, 647427, 627315, 551406, 544991, 527259, 580867, 619087, 581967, 569245, 642103, 619162, 538305, 628119, 654858, 568852, 646750, 561601, 631088, 605215, 653634, 600022, 632570, 536435, 644089, 576678, 631651, 648732, 561853, 570231, 610229, 640522, 615377, 586042, 583944, 624176, 569525, 569522, 618190, 638038, 640464, 648814, 569903, 612753, 648553, 649773, 620234, 635915, 627172, 591273, 554345, 582122, 551589, 581730, 623451, 606524, 640415, 586037, 586422, 657503, 618835, 618535, 556616, 623990, 532816, 654592, 651350, 644267, 612722, 612253, 609963, 570535, 597590, 633656, 595279, 649320	
Task 4.2 results end


###########################################################
# Task 4.3
###########################################################

Task 4.3 code begin
Run:
#!/bin/bash

export EXC2_4_3_BASE=/user/s1115104/data/output/exc-cw2/s1115104_task_4_3.out
export EXC2_4_3_INPUT=/data/assignments/ex2/task3/stackLarge.txt
export EXC2_4_3_JOIN=/user/s1115104/data/output/exc-cw2/s1115104_task_4_3.out/join
export EXC2_4_3_OUTPUT=/user/s1115104/data/output/exc-cw2/s1115104_task_4_3.out/aggregate

hdfs dfs -mkdir $EXC2_4_3_BASE

hadoop jar /opt/hadoop/hadoop-2.7.1/share/hadoop/tools/lib/hadoop-streaming-2.7.1.jar \
    -D mapred.job.name="WANTED: Best StackOverflow User - Join. EXC 2 4-4 L" \
    -D mapred.reduce.tasks=16 \
    -D mapreduce.job.output.key.comparator.class=org.apache.hadoop.mapreduce.lib.partition.KeyFieldBasedComparator \
    -D stream.num.map.output.key.fields=1 \
    -D num.key.fields.for.partition=1 \
    -D mapreduce.partition.keypartitioner.options=-k1,1 \
    -D mapreduce.partition.keycomparator.options="-k1,1 -k2,2r" \
    -D mapreduce.map.output.key.field.separator=" " \
    -input $EXC2_4_3_INPUT \
    -output $EXC2_4_3_JOIN \
    -mapper join-mapper.py \
    -reducer join-reducer.py \
    -file join-mapper.py \
    -file join-reducer.py \
    -partitioner org.apache.hadoop.mapred.lib.KeyFieldBasedPartitioner

# Verify previous step suceeded
if hdfs dfs -test -e $EXC2_4_3_JOIN/_SUCCESS ; then

    hadoop jar /opt/hadoop/hadoop-2.7.1/share/hadoop/tools/lib/hadoop-streaming-2.7.1.jar \
        -D mapred.job.name="WANTED: Best StackOverflow User - Aggregate. EXC 2 4-4 S" \
        -D mapred.reduce.tasks=1 \
        -input $EXC2_4_3_JOIN \
        -output $EXC2_4_3_OUTPUT \
        -mapper cat \
        -combiner aggregate-combiner.py \
        -reducer aggregate-reducer.py \
        -file aggregate-combiner.py \
        -file aggregate-reducer.py

    hdfs dfs -cat $EXC2_4_3_OUTPUT/part-* | head -n 10 > results.txt
fi


########################################################
#!/usr/bin/python
# join-mapper.py
import sys
import xml.etree.ElementTree as xml

POST_TYPE_ID = 'PostTypeId'
OWNER_USER_ID = 'OwnerUserId'
ACCEPTED_ANSWER = 'AcceptedAnswerId'
ID = 'Id'

ANSWER_TYPE_ID = '2'

QUESTION = 'Q'
ANSWER = 'A'

def is_answer(post_type): return post_type == ANSWER_TYPE_ID

for line in sys.stdin:
    content = xml.fromstring(line.strip())
    attributes = content.attrib


    if is_answer(attributes[POST_TYPE_ID]):
        # Print the answer set
        # Outputs: <answer_id>  A   <user_id>
        user_id = attributes.get(OWNER_USER_ID, None)
        answer_id = attributes.get(ID, None)

        # Skip results without proper attributes
        if user_id and answer_id:
            print('{0} {1} {2}'.format(answer_id, ANSWER, user_id))
        else:
            sys.stderr.write("Could not retrieve name and answer_id.\n")
    else:
        # Print the ID of the accepted answer and type
        # Outputs: <accepted_answer_id> Q
        accepted_answer_id = attributes.get(ACCEPTED_ANSWER, None)

        if accepted_answer_id:
            print('{0} {1}'.format(accepted_answer_id, QUESTION))




########################################################
#!/usr/bin/python
# join-reducer.py
import sys

QUESTION = 'Q'
ANSWER = 'A'


current_question_id = None

for line in sys.stdin:
    tokens = line.strip().split()
    _id = tokens[0]

    if len(tokens) == 2:
        # This is a Question row
        current_question_id = _id
    if len(tokens) == 3:
        owner_id = tokens[-1]
        # Answer row - validate against question id
        if current_question_id == _id:
            print('{0}\t{1}'.format(owner_id, _id))



########################################################
#!/usr/bin/python
# aggregate-combiner.py
import sys

answers = []
last_user_id = None

MEM_THRESHOLD = 1024 * 1024 * 1024 # 1 GB

def write(user, entries):
    if len(entries) > 0:
        print('{0}\t{1}'.format(user, ','.join(entries)))

for line in sys.stdin:
    user_id, answer_id = line.strip().split('\t', 1)

    if (last_user_id and last_user_id != user_id) or sys.getsizeof(answers) > MEM_THRESHOLD:
        write(last_user_id, answers)
        answers = []

    last_user_id = user_id
    answers.append(answer_id)

if last_user_id:
    write(last_user_id, answers)

########################################################
#!/usr/bin/python
# aggregate-reducer.py
import sys
from collections import namedtuple

UserAnswers = namedtuple('UserAnswers', ['user', 'answers'])

hero_user = None
last_user = None

for line in sys.stdin:
    user, answers = line.strip().split('\t', 1)
    answers = answers.split(',')

    if not hero_user:
        # Init
        hero_user = UserAnswers(user, [])
        last_user = UserAnswers(user, [])

    if last_user.user != user:
        # New set of rows

        # Is it the new hero?
        if len(last_user.answers) > len(hero_user.answers):
            hero_user = last_user

        last_user = UserAnswers(user, [])

    last_user.answers.extend(answers)

if hero_user:
    print('{0} -> {1}, {2}'.format(hero_user.user, len(hero_user.answers), ', '.join(hero_user.answers)))




Task 4.3 code end

Task 4.3 results begin
22656 -> 1097, 241670, 239316, 463078, 201630, 620246, 205117, 234751, 209319, 222079, 344377, 612700, 343552, 524106, 556039, 556622, 330363, 326667, 560131, 538714, 371508, 314831, 648192, 314138, 370936, 313115, 304821, 570493, 658713, 302038, 298287, 658669, 296780, 289520, 413864, 284905, 359634, 426008, 277266, 272393, 448635, 583440, 271529, 524436, 511489, 355300, 259985, 259732, 549714, 257059, 393173, 254908, 253473, 183260, 595298, 507958, 351032, 472153, 192615, 396011, 414315, 428956, 246114, 346346, 460350, 453188, 454299, 477333, 193879, 524578, 201266, 283491, 626207, 450482, 487695, 299177, 206227, 523368, 302378, 628072, 618161, 309528, 177561, 589940, 579721, 315369, 568655, 176274, 520046, 324356, 169872, 656336, 430709, 516999, 163261, 261073, 516636, 412774, 411597, 411586, 336797, 410684, 514964, 258499, 225994, 340174, 256079, 608470, 342099, 229558, 146167, 556522, 531321, 606913, 474198, 537190, 531772, 512335, 252790, 251904, 353154, 434697, 407417, 439317, 386099, 359215, 569920, 510388, 363582, 576795, 435797, 399772, 398155, 576762, 600016, 394948, 292747, 258999, 261067, 566180, 262101, 265214, 265599, 265885, 268536, 570365, 269070, 555955, 269625, 573445, 281285, 242763, 581464, 538295, 534802, 533878, 239903, 533339, 531986, 290063, 585897, 293143, 235459, 293891, 293907, 233303, 233149, 295145, 232621, 298313, 229849, 520568, 516581, 302317, 221852, 316925, 612193, 493420, 493387, 613738, 489548, 329141, 619013, 337171, 339937, 198576, 342016, 343886, 198136, 346735, 350178, 352631, 468934, 356118, 188148, 187048, 186685, 464886, 186003, 362443, 462235, 461465, 365017, 447429, 168414, 385851, 385972, 161484, 438739, 654735, 436957, 396026, 400888, 146227, 413329, 420633, 453370, 578242, 409722, 370842, 409876, 291114, 348045, 647795, 263416, 626367, 339894, 208202, 557133, 601485, 446671, 338761, 208136, 246394, 362119, 450856, 197191, 281049, 442480, 375803, 293897, 555818, 442282, 657156, 311717, 638049, 652580, 287627, 211161, 161787, 503387, 395306, 525420, 569541, 212283, 657585, 232803, 651062, 232616, 380786, 462725, 647432, 535782, 648169, 615389, 512550, 256085, 215462, 308962, 605544, 384416, 649786, 340526, 612067, 590237, 343507, 430160, 300409, 540649, 221209, 266282, 427993, 490863, 336396, 390158, 480039, 313131, 300074, 219001, 618202, 282113, 516342, 646780, 296985, 386514, 595415, 299526, 302172, 305362, 640537, 255834, 151950, 465648, 313590, 589805, 606641, 490909, 462733, 154524, 236705, 554308, 586280, 325739, 239252, 263633, 607147, 204508, 638233, 336838, 443956, 536461, 340028, 439584, 439232, 582567, 570588, 657175, 287217, 287190, 341865, 436817, 162323, 417485, 252831, 286645, 499407, 162774, 573217, 648122, 349384, 209002, 271575, 183696, 208683, 208221, 610837, 503928, 362732, 506310, 650921, 421868, 659177, 240665, 493735, 309766, 533066, 509290, 213582, 244838, 244805, 274615, 448333, 470976, 649611, 533473, 533907, 641916, 214693, 156838, 363627, 305168, 355806, 656387, 219654, 241291, 495281, 304541, 615115, 588330, 213450, 239663, 318698, 629833, 605776, 605787, 474480, 366905, 612772, 513684, 367829, 419975, 535651, 631560, 281358, 460746, 288827, 300493, 487097, 217993, 474859, 233492, 406841, 349267, 291357, 370942, 257252, 371525, 565054, 280236, 644287, 657696, 279395, 271447, 271645, 564949, 619108, 577451, 375837, 580910, 643110, 197181, 385814, 552915, 225077, 624223, 623211, 435045, 614587, 573628, 263080, 293269, 196117, 532607, 448661, 449035, 549762, 229134, 452945, 294259, 374801, 488816, 266319, 605554, 378140, 343380, 309005, 590137, 341977, 630826, 182620, 391576, 574814, 538751, 299979, 620519, 337143, 481853, 186613, 528411, 304484, 618886, 481237, 255638, 480357, 480313, 541506, 618226, 255072, 190254, 254109, 423806, 600571, 191189, 370742, 640517, 314010, 598063, 602342, 431319, 545483, 434053, 292994, 627213, 439311, 323261, 642030, 173333, 306131, 533836, 233943, 262631, 508157, 340566, 622749, 366339, 305163, 338042, 367923, 261146, 285368, 229670, 455417, 272960, 651338, 197247, 393179, 573568, 644095, 181462, 384335, 564845, 388834, 409982, 290340, 325161, 495622, 477406, 555979, 217691, 503839, 256636, 540887, 398217, 201449, 324616, 210139, 542933, 534826, 626121, 543329, 154710, 640426, 479095, 585415, 631934, 582137, 468392, 277767, 358716, 457084, 234999, 641944, 266764, 265994, 377259, 383782, 569627, 362640, 362453, 362332, 361397, 388369, 609981, 556009, 552478, 550586, 355644, 549618, 547968, 352421, 164398, 610767, 538508, 177840, 601813, 402944, 533888, 533448, 654756, 187432, 190308, 197299, 523449, 614738, 520413, 519682, 585313, 204009, 321104, 419807, 510953, 212512, 213403, 214712, 586105, 309791, 309076, 427370, 619210, 644757, 498644, 302129, 496620, 296794, 440047, 233236, 242586, 286520, 245006, 285101, 636062, 451696, 475830, 591165, 253795, 276455, 456811, 469978, 592078, 457999, 458417, 271928, 264740, 266846, 569253, 346085, 267836, 557186, 315186, 314130, 593799, 574659, 141468, 186667, 295754, 212094, 512471, 570347, 327462, 182696, 295248, 283676, 270641, 598738, 145516, 317034, 283269, 242910, 651428, 427919, 651824, 466815, 193740, 493501, 231536, 288802, 465281, 293268, 653183, 280167, 632162, 153744, 272830, 300418, 218485, 229023, 286613, 545064, 302492, 320834, 334815, 204581, 246529, 534570, 536451, 161565, 275129, 251974, 374426, 453071, 504683, 508094, 194307, 207711, 527965, 326104, 527778, 405733, 606549, 178990, 619859, 285849, 243054, 414764, 208756, 489421, 371946, 230063, 632003, 313069, 267089, 577300, 596396, 631552, 290216, 533289, 290656, 446499, 597045, 486781, 285184, 519506, 610674, 358653, 591979, 485296, 535731, 182515, 213651, 312277, 466574, 319911, 536996, 378266, 139841, 246101, 349259, 586210, 268662, 586397, 379058, 468873, 333254, 513346, 428624, 627757, 436764, 570606, 200165, 511223, 336433, 647502, 253619, 254010, 479983, 642970, 389871, 295040, 388793, 589950, 353065, 316578, 333840, 514768, 144189, 388378, 476554, 390072, 204744, 269325, 392096, 221695, 625538, 474585, 474288, 473122, 597686, 481350, 227525, 227569, 511413, 227833, 483231, 276255, 278521, 280160, 370580, 399774, 464971, 464861, 524514, 552850, 462023, 200784, 540530, 594276, 364024, 620544, 600667, 507904, 620225, 619461, 298332, 645833, 413106, 638848, 454895, 352441, 352210, 255113, 352133, 454312, 618927, 491591, 528172, 308040, 346215, 446722, 445886, 157213, 443433, 495012, 420894, 344400, 186550, 496167, 530014, 543500, 532841, 568789, 423875, 191170, 241143, 424612, 611315, 608043, 434963, 187793, 329209, 330177, 263257, 531338, 481079, 360255, 618596, 580794, 300008, 519530, 225967, 581355, 631834, 333404, 436738, 499218, 474468, 356977, 448272, 594973, 552887, 581432, 317608, 654868, 330533, 286445, 317097, 325308, 253962, 188017, 221941, 638121, 164455, 353435, 453557, 453920, 295597, 288090, 388448, 264643, 648818, 551600, 340554, 552469, 258219, 333217, 264478, 566659, 294145, 293919, 293908, 162750, 301977, 493201, 624151, 255656, 394960, 344635, 590166, 399811, 396159, 646805, 630635, 578222, 277790, 305257, 577430, 444000, 605832, 385727, 144085, 337366, 481724, 439633, 519537, 259695, 489386, 372648, 161965, 252803, 460824, 612267, 308689, 324661, 580702, 360180, 234395, 324078, 569554, 493956, 436773, 478177, 323220, 542791, 344340, 570170, 375074, 516897, 341062, 377263, 475828, 164270, 460390, 194514, 273318, 620396, 392800, 472506, 269320, 583958, 343691, 514840, 424453, 204354, 312275, 375926, 241380, 270106, 342272, 425245, 635664, 653907, 280446, 640350, 271415, 370811, 327312, 395320, 234016, 542852, 238669, 626936, 626150, 532952, 624192, 528041, 527837, 247623, 545437, 254333, 510358, 263177, 657703, 506184, 266301, 268600, 268699, 270173, 164650, 272164, 639196, 277873, 221322, 493055, 280293, 490739, 285809, 640323, 635934, 655668, 483067, 483001, 604293, 213710, 300511, 144069, 466974, 465731, 464851, 316659, 324090, 330640, 208150, 642116, 564973, 443258, 443203, 343862, 344555, 439925, 589778, 348977, 349428, 349736, 433116, 186155, 359339, 359449, 427737, 370828, 634867, 633602, 374750, 188993, 411523, 403070, 580928, 386267, 400039, 388742, 605338, 533420, 605866, 221383, 597660, 334595, 333671, 223709, 200142, 225255, 362804, 329106, 366352, 609529, 227598, 195615, 325542, 534850, 229006, 656114, 371736, 339798, 235067, 372061, 373804, 188130, 521144, 237685, 384529, 182767, 396629, 178197, 400908, 618192, 309944, 309636, 406359, 209448, 244153, 245077, 305764, 305412, 586440, 304664, 626964, 627514, 627767, 585373, 629428, 503434, 631672, 446476, 295748, 141528, 346772, 295627, 295160, 289363, 457146, 254053, 639328, 459566, 460858, 654684, 257540, 640692, 493517, 282548, 344055, 644366, 258585, 567223, 657214, 577365, 648106, 538227, 261813, 265031, 265130, 655311	
Task 4.3 results end